﻿

@{
    ViewData["Title"] = "Trang Chủ";
    Layout = "_Layout";
}

@model List<ThuongMaiDienTu.Models.SanPham>
<link href="~/css/index.css" rel="stylesheet" />

<!-- Banner Slideshow -->
@if (ViewBag.Banners != null && ViewBag.Banners.Count > 0)
{
    <div class="container-fluid custom-banner">
        <div id="bannerCarousel" class="carousel slide" data-bs-ride="carousel">
            <div class="carousel-indicators">
                @for (int i = 0; i < ViewBag.Banners.Count; i++)
                {
                    <button type="button" data-bs-target="#bannerCarousel" data-bs-slide-to="@i" class="@(i == 0 ? "active" : "")"></button>
                }
            </div>

            <div class="carousel-inner">
                @for (int i = 0; i < ViewBag.Banners.Count; i++)
                {
                    var banner = ViewBag.Banners[i];
                    <div class="carousel-item @(i == 0 ? "active" : "")">
                        @*<img src="@Url.Content(banner.Hinh_Anh)" class="d-block w-100 img-fluid" alt="@banner.Tieu_De">*@

                        @*Mã hóa Tieu_De để tránh XSS trong thuộc tính alt.*@
                        <img src="@Url.Content(banner.Hinh_Anh)" class="d-block w-100 img-fluid" alt="@Html.Encode(banner.Tieu_De)">
                    </div>
                }
            </div>

            <button class="carousel-control-prev" type="button" data-bs-target="#bannerCarousel" data-bs-slide="prev">
                <span class="carousel-control-prev-icon"></span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#bannerCarousel" data-bs-slide="next">
                <span class="carousel-control-next-icon"></span>
            </button>
        </div>
    </div>
}

<main>
    <div class="container">
        @if (ViewBag.IsLocked == true)
        {
            <div class="alert alert-danger text-center my-4">
                <h4>Tài khoản của bạn đã bị khóa!</h4>
                <p>Vui lòng liên hệ quản trị viên để biết thêm chi tiết.</p>
            </div>
        }
        else
        {
            <div class="filter-container d-flex justify-content-center align-items-center my-4">
                <label for="category" class="me-2">Bộ Lọc</label>
                <select id="category" class="form-select w-auto" onchange="filterByCategory()">
                    <option value="0">Tất cả danh mục</option>
                    @foreach (var danhMuc in ViewBag.DanhMucs)
                    {
                        <option value="@danhMuc.Id" selected="@(ViewBag.SelectedDanhMuc == danhMuc.Id ? "selected" : null)">
                            @danhMuc.Ten_Danh_Muc
                        </option>
                    }
                </select>
            </div>

            <div class="product-list row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 row-cols-xl-5 g-4" id="productList">
                @*<div class="product-list row row-cols-1 row-cols-lg-4 g-4" id="productList"> *@
                @foreach (var sanPham in Model)
                {
                    <div class="col">
                        <div class="product-item h-100">
                            <a href="@Url.Action("ChiTietSanPham", "SanPham", new { id = sanPham.Id })">
                                <div class="product-image">
                                    @{
                                        string defaultImage = "~/images/logo.png";
                                        string imageUrl = string.IsNullOrEmpty(sanPham.Hinh_Anh) ? defaultImage : sanPham.Hinh_Anh;
                                    }

                                    @*<img src="@Url.Content(imageUrl)" alt="@sanPham.Ten_San_Pham" class="img-fluid">*@

                                    @*Sử dụng @Html.Encode cho Ten_San_Pham để đảm bảo tên sản phẩm không chứa mã HTML hoặc JavaScript độc hại*@
                                    <img src="@Url.Content(imageUrl)" alt="@Html.Encode(sanPham.Ten_San_Pham)" class="img-fluid">

                                </div>
                                <p><strong>@sanPham.Ten_San_Pham</strong></p>
                                <p style="color:red;">Giảm giá: @sanPham.Giam_Gia?.ToString("N0") VNĐ</p>
                                <p style="font-weight: bold;">Giá khuyến mãi: @sanPham.Gia_Khuyen_Mai?.ToString("N0") VNĐ</p>
                            </a>
                        </div>
                    </div>
                }
            </div>

            @if (ViewBag.TotalPages > 1)
            {
                <nav aria-label="Page navigation" class="mt-4">
                    <ul class="pagination justify-content-center" id="pagination">
                        <li class="page-item @(ViewBag.CurrentPage == 1 ? "disabled" : "")">
                            <a class="page-link" href="#" data-page="@(ViewBag.CurrentPage - 1)">Trước</a>
                        </li>
                        @for (int i = 1; i <= ViewBag.TotalPages; i++)
                        {
                            <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                                <a class="page-link" href="#" data-page="@i">@i</a>
                            </li>
                        }
                        <li class="page-item @(ViewBag.CurrentPage == ViewBag.TotalPages ? "disabled" : "")">
                            <a class="page-link" href="#" data-page="@(ViewBag.CurrentPage + 1)">Tiếp</a>
                        </li>
                    </ul>
                </nav>
            }
        }
    </div>
</main>

<script>

    // Hàm htmlEncode chuyển các ký tự đặc biệt trong chuỗi (&, <, >, ", ') thành các thực thể HTML tương ứng (&, <, >, ", '). Điều này ngăn trình duyệt diễn giải chuỗi như mã HTML hoặc JavaScript, giúp tránh tấn công XSS bằng cách đảm bảo dữ liệu chỉ được hiển thị dưới dạng văn bản thuần.
    function htmlEncode(str) {
        return String(str)
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#39;');
    }

    function loadProducts(page, danhMucId = null) {
        var url = '@Url.Action("GetProducts", "Home")' + '?page=' + page;
        if (danhMucId !== null && danhMucId !== "0") {
            url += '&danhMucId=' + danhMucId;
        }

        fetch(url)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                var productList = document.getElementById('productList');
                productList.innerHTML = ''; // Xóa danh sách cũ

                if (data.isLocked) {
                    productList.innerHTML = '<div class="alert alert-danger text-center">Tài khoản của bạn đã bị khóa!</div>';
                    document.getElementById('pagination').innerHTML = ''; // Xóa phân trang
                } else {
                    data.products.forEach(function (sp) {
                        var html = `
                                    <div class="col">
                                        <div class="product-item h-100">
                                            <a href="@Url.Action("ChiTietSanPham", "SanPham")/${sp.id}">
                                                <div class="product-image">
    @* Trong <img src="${htmlEncode(sp.hinh_Anh)}", để đảm bảo URL hình ảnh không chứa mã độc (ví dụ: javascript:alert('Hacked')). *@
                                                        <img src="${htmlEncode(sp.hinh_Anh)}" alt="${htmlEncode(sp.ten_San_Pham)}" class="img-fluid" onerror="this.src='/images/default-product-image.jpg'">
                                                </div>
    @*alt="${htmlEncode(sp.ten_San_Pham)}" và <p><strong>${htmlEncode(sp.ten_San_Pham)}</strong></p>, để ngăn tên sản phẩm chứa JavaScript (ví dụ: <script>alert('Hacked')</script>)*@
                                                    <p><strong>${htmlEncode(sp.ten_San_Pham)}</strong></p>
                                                <p style="color:red;">Giảm giá: ${sp.giam_Gia ? sp.giam_Gia.toLocaleString() : 0} VNĐ</p>
                                                    <p style="font-weight: bold;">Giá khuyến mãi: ${(sp.gia_Khuyen_Mai || 0).toLocaleString('vi-VN', { minimumFractionDigits: 0, maximumFractionDigits: 0 })} VNĐ</p>
                                            </a>
                                        </div>
                                    </div>`;
                        productList.innerHTML += html;
                    });

                    var pagination = document.getElementById('pagination');
                    pagination.innerHTML = '';
                    pagination.innerHTML += `
                                <li class="page-item ${data.currentPage === 1 ? 'disabled' : ''}">
                                    <a class="page-link" href="#" data-page="${data.currentPage - 1}">Trước</a>
                                </li>`;
                    for (let i = 1; i <= data.totalPages; i++) {
                        pagination.innerHTML += `
                                    <li class="page-item ${i === data.currentPage ? 'active' : ''}">
                                        <a class="page-link" href="#" data-page="${i}">${i}</a>
                                    </li>`;
                    }
                    pagination.innerHTML += `
                                <li class="page-item ${data.currentPage === data.totalPages ? 'disabled' : ''}">
                                    <a class="page-link" href="#" data-page="${data.currentPage + 1}">Tiếp</a>
                                </li>`;

                    attachPaginationEvents(danhMucId);
                }
            })
            .catch(error => console.error('Error fetching products:', error));
    }

    function attachPaginationEvents(danhMucId) {
        var paginationLinks = document.querySelectorAll('#pagination .page-link');
        paginationLinks.forEach(function (link) {
            link.addEventListener('click', function (e) {
                e.preventDefault();
                var page = this.getAttribute('data-page');
                loadProducts(page, danhMucId);
            });
        });
    }

    function filterByCategory() {
        var selectedCategory = document.getElementById('category').value;
        loadProducts(1, selectedCategory);
    }

    document.addEventListener('DOMContentLoaded', function () {
        var initialDanhMucId = @Html.Raw(ViewBag.SelectedDanhMuc != null ? ViewBag.SelectedDanhMuc : "null");
        attachPaginationEvents(initialDanhMucId);
    });
</script>